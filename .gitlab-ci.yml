image: "coqorg/coq:latest"

build x86 minimal with digger:
  stage: build
  script:
    # get digger from latest CI artifacts
    - cd tools/digger
    - curl -L 'https://gitlab.univ-lille.fr/2xs/digger/-/jobs/artifacts/master/download?job=build' -o digger.zip
    - unzip -o digger.zip
    - cd ../..

    - .ci/apt-get.sh nasm gcc

    - ./configure.sh --architecture=x86 --partition-name=minimal --libpip=/tmp --no-command-check
    - make minimal.elf
  artifacts:
    paths:
      - minimal.elf
    expire_in: 1 hour

build arm minimal with digger:
  stage: build
  script:
    # get digger from latest CI artifacts
    - cd tools/digger
    - curl -L 'https://gitlab.univ-lille.fr/2xs/digger/-/jobs/artifacts/master/download?job=build' -o digger.zip
    - unzip -o digger.zip
    - cd ../..

    - .ci/apt-get.sh libnewlib-arm-none-eabi gcc-arm-none-eabi

    - ./configure.sh --architecture=armv7 --partition-name=minimal --libpip=/tmp --no-command-check
    - make minimal.elf
  artifacts:
    paths:
      - minimal.elf
    expire_in: 1 hour

build x86 minimal with dx:
  stage: build
  script:
    # select the switch in which dx and its dependencies were compiled
    - eval $(opam env --switch=4.07.1+flambda --set-switch)
    - LIB=$(opam var lib)

    # get dx from latest CI artifacts
    - cd .ci
    - curl -L 'https://gitlab.univ-lille.fr/2xs/dx/-/jobs/artifacts/main/download?job=build%20dx%20and%20deps' -o dx.zip
    - unzip -o dx.zip
    - rsync -rpt dx-and-deps/* $LIB
    - cd ..

    - .ci/apt-get.sh nasm gcc

    - ./configure.sh --architecture=x86 --partition-name=minimal --libpip=/tmp --no-command-check
    - make DXDIR=$LIB/dx minimal.elf
  artifacts:
    paths:
      - minimal.elf
    expire_in: 1 hour

build arm minimal with dx:
  stage: build
  script:
    # select the switch in which dx and its dependencies were compiled
    - eval $(opam env --switch=4.07.1+flambda --set-switch)
    - LIB=$(opam var lib)

    # get dx from latest CI artifacts
    - cd .ci
    - curl -L 'https://gitlab.univ-lille.fr/2xs/dx/-/jobs/artifacts/main/download?job=build%20dx%20and%20deps' -o dx.zip
    - unzip -o dx.zip
    - rsync -rpt dx-and-deps/* $LIB
    - cd ..

    - .ci/apt-get.sh libnewlib-arm-none-eabi gcc-arm-none-eabi

    - ./configure.sh --architecture=armv7 --partition-name=minimal --libpip=/tmp --no-command-check
    - make DXDIR=$LIB/dx minimal.elf
  artifacts:
    paths:
      - minimal.elf
    expire_in: 1 hour

test x86 minimal (digger):
  stage: test
  needs:
    - job: build x86 minimal with digger
      artifacts: true
  script:
    - .ci/apt-get.sh qemu-system-x86
    - ./configure.sh --architecture=x86 --partition-name=minimal --libpip=/tmp --no-command-check
    - make -o minimal.elf test-minimal

test x86 minimal (dx):
  stage: test
  needs:
    - job: build x86 minimal with dx
      artifacts: true
  script:
    - .ci/apt-get.sh qemu-system-x86
    - ./configure.sh --architecture=x86 --partition-name=minimal --libpip=/tmp --no-command-check
    - make -o minimal.elf test-minimal

test arm minimal (digger):
  stage: test
  needs:
    - job: build arm minimal with digger
      artifacts: true
  script:
    - .ci/apt-get.sh qemu-system-arm
    - ./configure.sh --architecture=armv7 --partition-name=minimal --libpip=/tmp --no-command-check
    - make -o minimal.elf test-minimal

test arm minimal (dx):
  stage: test
  needs:
    - job: build arm minimal with dx
      artifacts: true
  script:
    - .ci/apt-get.sh qemu-system-arm
    - ./configure.sh --architecture=armv7 --partition-name=minimal --libpip=/tmp --no-command-check
    - make -o minimal.elf test-minimal

check proofs:
  when: manual
  script:
    - coqc --version
    - ./configure.sh --architecture=x86 --partition-name=minimal --libpip=/tmp --no-command-check
    - make proofs
